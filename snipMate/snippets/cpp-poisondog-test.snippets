snippet tt
	TEST_F(`Filename()`, ${1:TestName}) {${2}
		ASSERT_TRUE(true);
	}
snippet ct
	#include "gtest/gtest.h"

	namespace ${1:package} {
		class ${2:`Filename()`} : public ::testing::Test {
		protected:
			$2() {
				${3:// You can do set-up work for each test here.}
			}
			virtual ~$2() {
				${4:// You can do clean-up work that doesn't throw exceptions here.}
			}
			${5:// If the constructor and destructor are not enough for setting up and cleaning up each test, you can define the following methods:}
			virtual void SetUp() {
				${6:// Code here will be called immediately after the constructor (right before each test).}
			}
			virtual void TearDown() {
				${7:// Code here will be called immediately after each test (right before the destructor).}
			}
		};
		TEST_F($2, ${8:TestName}) {
			${9}
		}
	}
snippet ae
	EXPECT_EQ(${1:except}, ${2:actual});${3}
snippet aed
	EXPECT_DOUBLE_EQ(${1:except}, ${2:actual});${3}
snippet an
	EXPECT_NEAR(${1:except}, ${2:actual}, ${3:pow(10, -6)});${4}
snippet at
	ASSERT_TRUE(${1});${2}
