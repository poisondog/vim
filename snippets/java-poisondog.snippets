snippet sysout
	System.out.println(${1});${2}
snippet syserr
	System.err.println(${1});${2}
snippet ?
	${1} ? ${2} : ${3};
snippet **
	/**
	 * ${1}
	 */
snippet {}
	{
		${1}
	}
snippet ()
	(${1})
snippet ""
	"${1}"
snippet ''
	'${1}'
snippet ce
	package ${1:}
	
	/**${2:}
	 * @author Adam Huang
	 * @since `system("date +%Y-%m-%d")`
	 */
	${3:public} enum ${4:`Filename("", "untitled")`} {${5}
	}
snippet si
	@since `system("date +%Y-%m-%d")`
snippet dep
	@Deprecated
snippet ch
	/*******************************
	 * Class Name : `Filename()`
	 * Create Time : `system("date +%Y-%m-%d")`
	 *******************************/
snippet cc
	package ${1:}
	
	/**${2:}
	 * @author Adam Huang
	 * @since `system("date +%Y-%m-%d")`
	 */
	${3:public} class ${4:`Filename("", "untitled")`} ${5}{${6}
	}
snippet fo
	for (int ${1:i} = ${2:0}; $1 ${3:<} ${4:length}; $1${5:++}) {${6}
	}
snippet foe
	for (${1:Object} ${2:obj} : ${3}) {${4}
	}
snippet new
	${1:Object} ${2:var} = new ${3:$1}(${4:});${5:}
snippet try
	try {${1}
	} catch(${2:Exception} ${3:e}) {
		${4:$3}.printStackTrace();
	}
snippet con
	/**
	 * Constructor
	 */
	${1:public} ${2:`Filename()`}(${3}) {${4}
	}
snippet fin
	@Override
	protected void finalize() throws Throwable {
		super.finalize();${1}
	}
snippet li
	Log.i(${1});${2}
snippet ld
	Log.d(${1});${2}
snippet lv
	Log.v(${1});${2}
snippet get
	${1:public} ${2:String} get${3:Value}() {
		return ${4:value};
	}
snippet set
	${1:public} void set${2:Value}(${3:String} ${4:value}) {
		this.$4 = $4;
	}
snippet regex
	${1:private} void ${2:filter}(String ${3:content}) {
		final String regex = "${4:(\\s)(.)(\\w)(\\d).?\\4\\3\\2\\1}";
		final Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);
		final Matcher matcher = pattern.matcher($3);
		while (matcher.find()) {
			System.out.println("Full match: " + matcher.group(0));
			System.out.println("match 1: " + matcher.group(1));
			${5}
		}
	}
snippet ymd
	yyyyMMddHHmmssSSSZ
